manaficator2 route




have the player fight in a pit

the player can earn coins doing quests. He uses the coins in a shop where he can buy gears

he can equip gears via the Gears screen. he can take up to 3 gears


main menu : just like that game

can go to mech nps (the options), a notice board (the quests) and a shop (gears)

or dungeon (door)

going into the dungeon opens a menu ( "Enter the dungeon" or "Change equipped gears" )

you can only go out of the dungeon if you die. A bracelet gave by the shopkeaper teleports you 
to the entrance when in troubles


need to feel very fast.


plays the same as manaficator. Hud minimalistic and leaderboard.






-------------------------------------

TO DO


Spells : 
  DONE inventory menu
  add spell effect to chain of effect to projectiles

shop :
  unlock spells in inventory

Quests:
  have 3 quests at all time
  have multiple triggers in the code for achievements
  gold on completion
  
Pit:
  DONE have waves
  DONE generate monsters
  have monster types (graphical and behavioral)

Leaderboard:
  only for endless mode
  record time survived
  
  
  






money can buy different wands, + objects influence on effect on touch and player stats

achievements unlock tiers ? or add money and tiers need to be bought



proj have a list of types and execute one after another


proj.updates = {1, 4, 5}

for i = 1, #effects do
  if i is_in(proj.updates) then 
end








list of possible effects for projectiles: 

different trajectories :
straight, 
target enemies, 
laser, 
cones, 
meteor, 
mines, 
puddles, 
traps, 
around player while active, 
go out of wand and then straight to enemy target if found)

different effects on touch (explode, put on fire, leech life, slow down, corrupt, confuse, attract, infect and propagate, dont_die_on_collide)

different attributes (size, speed, damage, life, 







WANDS : 





player has wands
wand has info about the projectile launched.



projectile accepst everything from wand 

later : player buffs can influence on wand projectile creation







laser : 


when wand is activated, create a projectile controled by mouse

when the projectile is destroyed, linked projectile is set to nil




meteor:

when shoot, creates a projectile. 
Doesnt do anything until dist from spawn > dist calculated
if dist > then activate.

if activate, hurt enemies around and make explosion
 




enemies, quests, hud, shop, leaderboard

---------------

01/29

add more enemies

add the quest system

add an hud for player health, score and wave infos

make shop pretty, make it use coins and make it unlock things

make closet to change weapon and 3 additional items

make it so enemies give points at death

load and save leaderboard





--------------------------- QUEST SYSTEM -----------------------


have multiple triggers.

have a table with an event and a function that changes some data for achievement tracking



example : when enemie dies, sends "acid_cloud_died" to achievementator()

achievementator gets this specific signal and triggers a function linked to that signal.

the function adds the signal received to the data already here

after, some checks are made to see if achievementator launches a reward function

--------------------------------------


quest board has only 3 quests at a time

other are unlocked when previous is completed

player has current_quests = {["1"] = 1,["2"] = 2,["3"] = 3,}







--------------------------------------

function init_achievementator()
  achievements = {}
  
  achievement["acid_cloud_dies"] = {  check = function()
                                                local c = count_acid_cloud_died
                                                c = (c or 0) + 1
                                                
                                                if c > 100 then reward(acid_cloud_dies) end
                                                
                                              end,
                                              
                                      reward =  function()
                                                  player.quest["acid_cloud_dies"].status = "completed"
                                                end,
                                    }
  
end


function get_signal_achievement(signal)

  if achievementator[signal] then achievementator[signal].check() end

end








all things send signals

current quest define what signals are taken into account

have a function per signal

each quest can only be completed once



--------------


function send_signal(signal, params)
  if signals[signal] then signals[signal](params)
end

signals = {}

signals.acid_cloud_is_dead = function(params)
  
  local c = count_acis_signals
  
  add_log


end





































